#include <iostream>
#include <locale.h>

using namespace std;
template <class T>
class bankAcc {
	T x;
public:
	bankAcc() :x(0) {}
	void set(int X) { x = X; }
	void add(int X) { x += X; }
	void withdraw(int X) {
		if (X > x) { cout<< "Недостаточно денег для проведения операции" << endl; }
		else { x -= X; }
	}
	T get() { return x; }
};

template <class TT>
class Transaction
{
	TT* that;
	TT* prev;
public:
	Transaction() :prev(NULL), that(new TT) {}
	Transaction(const Transaction& obj) :
		that(new TT(*(obj.that))), prev(NULL) {}
	~Transaction() { delete that; delete prev; }
	Transaction& operator = (const Transaction& obj);
	void Show(int);
	int BeginSetTransaction();
	int BeginPutTransaction(int);
	int BeginWithdrawTransaction(int);
	void Commit();
	void DeleteTransaction();
	TT* operator->();
};

template <class TT>
Transaction<TT>& Transaction<TT>::operator=(const Transaction <TT>& obj) {
	if (this != &obj) {
		delete that;
		that = new TT(*(obj.that));
	}
	return *this;
}

template <class TT>
TT* Transaction<TT>::operator->()
{
	return that;
}

template<class TT>
void Transaction<TT>::Show(int fl) {
	cout << "cостояние объекта";
	if (!fl)cout << " до начала транзакции" << endl;
	else cout << " после выполнения транзакции" << endl;
	if (prev)cout << "prev = NULL" << endl;
	cout << "that = " << that->get() << endl;
}

template<class TT>
int Transaction<TT>::BeginPutTransaction(int amount) {
	delete prev;
	prev = that;
	that = new TT(*prev);
	if (!that)return 0;
	that->add(amount);
	return 1;
}

template<class TT>
int Transaction<TT>::BeginSetTransaction() {
	delete prev;
	prev = that;
	that = new TT(*prev);
	if (!that)return 0;
	that->set(7);
	return 1;
}

template<class TT>
int Transaction<TT>::BeginWithdrawTransaction(int amount) {
	delete prev;
	prev = that;
	that = new TT(*prev);
	if (!that)return 0;
	that->withdraw(amount);
	return 1;
}

template<class TT>
void Transaction<TT>::Commit() {
	delete prev;
	prev = NULL;
}
template<class TT>
void Transaction<TT>::DeleteTransaction() {
	if (prev != NULL) {
		delete that;
		that = prev;
		prev = NULL;
	}
}

using namespace std;
int main()
{
	setlocale(LC_ALL, "Russian");

	Transaction < bankAcc <int> >tr;
	tr->set(15);
	tr.Show(0);
	if (tr.BeginPutTransaction(10)) {
		tr.Show(1);
		tr.Commit();
	}
	tr.DeleteTransaction();
	tr.Show(0);
	if (tr.BeginPutTransaction(15)) {
		tr.Show(1);
		tr.Commit();
	}
	tr.Show(0);
	if (tr.BeginWithdrawTransaction(10)) {
		tr.Show(1);
		tr.Commit();
	}
	tr.Show(0);
	return 0;
}
